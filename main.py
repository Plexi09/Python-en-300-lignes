#################################################################################
#           PYTHON EN 300 LIGNES | FAIT AVEC ‚ù§ PAR PLEXI09            #
#################################################################################

# COMMENTAIRES

# Un commentaire en Python commence par un di√®se (#). 
# Tout texte qui suit ce symbole est ignor√© par l'interpr√©teur Python.
# Les commentaires permettent de rendre le code plus compr√©hensible pour l'humain et expliquent son fonctionnement.

# VARIABLES

# Une variable est un conteneur qui permet de stocker une valeur en m√©moire.
# Cette valeur peut √™tre un entier, une cha√Æne de caract√®res, une liste, etc.
example = 0  # On d√©clare une variable 'example' de type entier (INT) avec une valeur initiale de 0.

# L'op√©rateur += permet d'incr√©menter la valeur d'une variable.
example += 1  # La variable 'example' est incr√©ment√©e de 1, passant de 0 √† 1.

# De m√™me, l'op√©rateur -= permet de d√©cr√©menter la valeur de la variable.
example -= 1  # La variable 'example' est d√©cr√©ment√©e de 1, revenant √† 0.

# Une liste est une structure de donn√©es qui permet de stocker plusieurs valeurs sous un m√™me nom.
# Ces valeurs peuvent √™tre de types diff√©rents (entiers, cha√Ænes de caract√®res, etc.).
example = []  # On d√©clare une liste vide.

# La fonction append() permet d'ajouter un √©l√©ment √† la fin de la liste.
example.append(1)  # L'√©l√©ment 1 est ajout√© √† la liste. La liste devient [1].

# Acc√©der √† un √©l√©ment d'une liste se fait en utilisant son index (commen√ßant √† 0).
# Par exemple, example[0] acc√©dera au premier √©l√©ment de la liste.
example[0] += 1  # L'√©l√©ment √† l'index 0 (qui vaut 1) est incr√©ment√© de 1. La liste devient [2].

# Une liste peut contenir d'autres listes, formant ainsi une structure imbriqu√©e, appel√© matrice.
example2 = [[1, 2], [3, 4]]  # D√©claration d'une matrice 2x2 contenant des listes imbriqu√©es.

# Acc√©der √† un √©l√©ment d'une liste imbriqu√©e :
print(example2[0][0])  # Acc√®de au premier √©l√©ment de la premi√®re liste imbriqu√©e, donc 1.

# FONCTIONS

# Une fonction est un bloc de code r√©utilisable. Elle prend g√©n√©ralement des arguments en entr√©e et retourne un r√©sultat.
# L'avantage des fonctions est d'√©viter la r√©p√©tition du m√™me code plusieurs fois.

def multiplier_par_deux(nombre):  # La fonction prend un argument 'nombre'.
    return nombre * 2  # Elle retourne ce nombre multipli√© par 2.

# Exemple d'utilisation de la fonction :
resultat = multiplier_par_deux(4)  # On passe l'argument 4 √† la fonction, qui retourne 4 * 2 = 8.
print(resultat)  # Affiche 8.

# CONDITIONS ET BOUCLES

# Les conditions permettent d'ex√©cuter un bloc de code uniquement si une certaine condition est vraie.

example = 6  # On assigne la valeur 6 √† la variable 'example'.

# Structure conditionnelle 'if' : si la condition est vraie, le code √† l'int√©rieur du bloc est ex√©cut√©.
if example > 5:  # Teste si 'example' est sup√©rieur √† 5.
    print("example est sup√©rieur √† 5")  # Si la condition est vraie, affiche ce message.
else:
    print("example n'est pas sup√©rieur √† 5")  # Si la condition est fausse, affiche ce message.

# Une boucle 'for' permet de parcourir une s√©quence (comme une liste) et d'ex√©cuter un bloc de code pour chaque √©l√©ment.
example = [1, 2, 3, 4, 5]
for nombre in example:
    print(nombre)  # Affiche chaque √©l√©ment de la liste 'example' un par un.

# Une boucle 'while' s'ex√©cute tant que la condition sp√©cifi√©e reste vraie.
example = 0
while example < 5:  # Tant que 'example' est inf√©rieur √† 5 :
    print(example)  # Affiche la valeur actuelle de 'example'.
    example += 1  # Incr√©mente 'example' de 1 √† chaque it√©ration.

# CLASSES

# Une classe est un mod√®le pour cr√©er des objets avec des propri√©t√©s et des m√©thodes associ√©es.
# Un objet est une instance d'une classe, et il poss√®de ses propres valeurs pour ces propri√©t√©s.
class Personne:
    def __init__(self, nom, age):  # Le constructeur est appel√© lors de la cr√©ation d'un objet. 
        self.nom = nom  # La propri√©t√© 'nom' est initialis√©e avec la valeur donn√©e.
        self.age = age  # La propri√©t√© 'age' est initialis√©e avec la valeur donn√©e.

    def saluer(self):  # Une m√©thode qui fait saluer la personne.
        print(f"Bonjour, je m'appelle {self.nom} et j'ai {self.age} ans")  # Affiche un message de salutation.

# On cr√©e une instance de la classe 'Personne' en passant 'Jean' et 30 comme valeurs pour 'nom' et 'age'.
personne = Personne("Jean", 30)
personne.saluer()  # Affiche "Bonjour, je m'appelle Jean et j'ai 30 ans".

# EXCEPTIONS

# Les exceptions permettent de g√©rer les erreurs qui se produisent pendant l'ex√©cution du programme.
# En cas d'erreur, l'ex√©cution normale du programme est interrompue, mais on peut g√©rer cette erreur avec 'try' et 'except'.

try:
    resultat = 10 / 0  # Cette ligne provoque une erreur de division par z√©ro.
except ZeroDivisionError:  # Si une erreur de type 'ZeroDivisionError' est lev√©e, le code dans ce bloc est ex√©cut√©.
    print("Erreur : division par z√©ro")  # Affiche un message d'erreur expliquant le probl√®me.

# EXERCICES

# üü¢ 1. Fonction retournant le carr√© d'un nombre.
def carre(nombre):
    return nombre ** 2  # La fonction retourne le carr√© du nombre en utilisant l'op√©rateur '**' pour l'exponentiation.

# üîµ 2. Afficher tous les nombres pairs de 1 √† 10.
for nombre in range(1, 11):  # La fonction range g√©n√®re des nombres de 1 √† 10 (11 exclu).
    if nombre % 2 == 0:  # Si le nombre est divisible par 2, il est pair.
        print(nombre)  # Affiche les nombres pairs.

# üîµ 3. Fonction pour v√©rifier si un nombre est premier.
def est_premier(nombre):
    if nombre < 2:  # Les nombres inf√©rieurs √† 2 ne sont pas premiers.
        return False
    for i in range(2, nombre):  # On teste si le nombre est divisible par un autre nombre que 1 et lui-m√™me.
        if nombre % i == 0:  # Si le nombre est divisible par 'i', il n'est pas premier.
            return False
    return True  # Si aucune division n'a eu lieu, le nombre est premier.

# üîµ 4. Calcul de la factorielle d'un nombre.
def factorielle(n):
    if n == 0:  # Par d√©finition, la factorielle de 0 est 1.
        return 1
    resultat = 1
    for i in range(1, n + 1):  # On multiplie tous les nombres de 1 √† n.
        resultat *= i
    return resultat

# üîµ 5. Classe Cercle avec calcul de l'aire.
import math  # On importe le module math pour utiliser la constante pi.

class Cercle:
    def __init__(self, rayon):  # Le constructeur prend un argument 'rayon' pour d√©finir le rayon du cercle.
        self.rayon = rayon  # La propri√©t√© 'rayon' est initialis√©e avec la valeur donn√©e.

    def aire(self):  # M√©thode pour calculer l'aire du cercle.
        return math.pi * self.rayon ** 2  # L'aire d'un cercle est donn√©e par la formule : pi * r^2.

# On cr√©e un objet de la classe Cercle avec un rayon de 5.
cercle1 = Cercle(5)
print(f"L'aire du cercle est : {cercle1.aire()}")  # Affiche l'aire du cercle avec le rayon 5.

# üü¢ 6. Inverser une cha√Æne de caract√®res.
def inverser_chaine(chaine):
    return chaine[::-1]  # Utilise le "slicing" pour inverser la cha√Æne.

# üü¢ 7. V√©rifier si un mot est un palindrome.
def est_palindrome(mot):
    return mot == mot[::-1]  # V√©rifie si le mot est √©gal √† son inverse.

# Bonne chance ! üöÄ
